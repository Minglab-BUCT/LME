searchState.loadedDescShard("lmers", 0, "Layered Molecular Editor (LME)\nChemistry concept data structure and functions\nFunctions for calling external programs like openbabel and …\nAtom group management\nInput/Output utils\nLayers for storage molecular modeling process\nBasic data structure for LME molecule\nSome simple functions used internally\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHide a collection of atoms\nExecute an isometry operation on selected structures\nLayers are the basic storage unit of the LME. Each …\nExecute Mirror operation on selected structures\nSet atoms to null\nRotate selected structure\nUpdate atoms by a list. To remove an atom, use null\nTranslate selected structure\nThis layer does nothing. It can be used as a placeholder, …\nUnhide a colletion of atoms\nUpdate atom elements\nUpdate charges\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe angle of the rotation\nThe axis vector\nThe rotatin center\nThe center of the mirror plane\nUse degree instead of radians\nThe isometry operation matrix\nThe law vector of the mirror plane\nSelected atoms\nSelected atoms\nSelect atoms\nSelect atoms\nThe translation vector\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAppend Layers to all structures in the workspace.\nWhen the targeted file not exists, stop the LME at the …\nCached static for the <code>cached_read_stack</code> function.\nExecute calculation with external programs\nDo nothing but leave a checkpoint if the <code>name</code> field is set …\nFor each structure in workspace, add layers in this runner …\nPlugin runner will output the current workspace into a …\nChange substituent on specified positions.\nIn a workflow, the base and existed layers will not be …\nOrigin of the cached function <code>cached_read_stack</code>.\nPrimes the cached function <code>cached_read_stack</code>. In a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe CLI arguments of the program to be called.\nThe CLI arguments passed to the program\nThe command to call\nThe environment variables to be set for the program to be …\nThe filepath to check if exists\nContinue even if some calculation failed, default to false …\nLayeres append to the structures.\nInformation of the break, tell the user what need to do …\nOutput the atom name and group information to files, …\nNegate select, if this is true, all strcutures matched by …\nRegular expression for matching the name of the structure …\nThe output file format and filename\nSet the input filename for the calculation program\nSet the format of the input file of the calculation program\nThe program to start, use a program name in PATH or give …\nRename the structure for output, please see <code>RenameOptions</code> …\nUsing serial mode to execute the calculation program.\nSet the template directory of the calculation\nRedirect the stderr of the program to a file. Ignore if …\nInput the input file from stdin (true/false)\nRedirect the stdout of the program to a file. Ignore if …\nSet the working directory, for each structure in workspace,\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")