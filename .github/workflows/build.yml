name: "Deploy Rust Docs to GitHub Pages"

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: linux-x64
            compression: tar -czvf
            extension: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: windows-x64
            compression: zip -r
            extension: zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install musl-tools and powershell (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y musl-tools

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Rust environment
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          
      - name: Build binary files in release mode
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive
        shell: pwsh
        run: |
          # 统一使用PowerShell处理路径
          $releasePath = "release"
          
          if ("${{ matrix.os }}" -eq "windows-latest") {
            # Windows使用原生压缩
            $files = Get-ChildItem -Path $releasePath -File
            Compress-Archive -Path $files.FullName -DestinationPath "${{ matrix.artifact_name }}.${{ matrix.extension }}" -CompressionLevel Optimal
          } else {
            # Linux使用tar并显式处理路径
            $tarFiles = Get-ChildItem -Path $releasePath -File | Select-Object -ExpandProperty Name
            Push-Location $releasePath
            tar -czvf "../${{ matrix.artifact_name }}.${{ matrix.extension }}" $tarFiles
            Pop-Location
          }

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-binaries
          path: ${{ matrix.artifact_name }}.${{ matrix.extension }}